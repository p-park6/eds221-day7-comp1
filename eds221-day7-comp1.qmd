---
title: "eds221-day7-comp1"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```


## Data Wrangling refresher
1. Starting from penguins, write a single piped sequence in which you:
-   Only include penguins at Dream and Biscoe Islands
-   Remove the year and sex variables
-   Add a new column body_mass_kg with penguins mass coverted from g to kg
-   Rename the island variable to location

```{r}
dream_biscoe <- penguins %>% 
  dplyr::filter(island == "Dream"| 
                island == "Biscoe") %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  rename(location = island)
#or
#dream_biscoe <- penguin %>% filter(island %in% c("Dream", Biscoe"))
dream_biscoe
```

```{r}
tidy_penguins <- penguins %>% 
  dplyr::select(-year, -sex)
tidy_penguins
```

```{r}
penguins_kg <- penguins %>% 
  dplyr::mutate(body_mass_kg = body_mass_g / 1000)
```

2. Starting from penguins, write a single piped sequence to :
-   limit to Adelie penguins
-   Remove any observatoins where flipper_length_mm is NA (!is.na() or drop_na
-   Group the data by sex
-   Create a summary table that contains the mean, standard deviation and sample size of flipper length for male and female Adelie penguins


```{r}
new_penguins_2 <- penguins %>% 
  filter(species == "Adelie") %>% #!is.na(flipper_length_mm)
  drop_na(flipper_length_mm) %>% 
  group_by(sex) %>% 
  summarise(mean_flipper = mean(flipper_length_mm),
            sd_flipper = sd(flipper_length_mm),
            sample_size = n())
```


```{r}
penguins %>% 
  group_by(species, island, sex) %>% 
  summarize(sample_size = n())

#count is just wrapping together group_by + summarize + n() to get countys of observations.
penguins %>% count(species, island, sex)
```



```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)

```


```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

```{r}
full_join(animals, sites)
left_join(animals,sites)
```


# Date-times with lubridate()
ymd: if date is in year - month- day
mdy: if the date is in month- day- year
dmy: if date is in day - month- year

```{r}
my_date_1 <- lubridate::mdy("03-15-1998")
my_date_1
class(my_date_1)

my_date_2 <- lubridate::mdy("11/7/2003")

my_date_3 <- lubridate::dmy("08-Jun-1974")

my_date4 <- lubridate::ymd("19740205")

my_date5 <- lubridate::dmy("06-20-2001") #warning pops up cause 20 is not a month
```

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
time_1
```

## Parse June 2nd 1982 at 4pm utc as a data in R

```{r}
time_2 <- lubridate::mdy_h("June-2-1982 4pm")
time_2
#lubidate outputs time on a 23 hour clock
```

```{r}
now <- with_tz(time_2, "America/Los_Angeles")
```

```{r}
with_tz(Sys.time(), "Asia/Novokuznetsk")
```

```{r}
 with_tz(Sys.time(), "Europe/Busingen")
```

# Access different parts of date-times
```{r}
lubridate::day(now)
lubridate::week(now)
lubridate::minute((now))
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "Oct 18, 2007", "Feb 12 2003", "Feb 14, 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 24, 18, 11)
)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarise(mean_size = mean(size_mm))
```


# Strings with stringr

Use str_detect to detect a string pattern

```{r}
my_string <- "Molly is best dog ever and she deserves lots of treats :D."

str_detect(my_string, pattern = "treats")

str_detect(my_string, "weather")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "taco salad", "super burrito")

str_detect(my_string_2, pattern = "taco")
```

```{r}
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

```{r}
starwars %>% 
  mutate(name_new = str_replace(name, pattern ="Sky", replacement = "fire"))
```


str_trim to get rid of leading and trailing whitespace

str_squish to get rid of leading and trailing whitespace AND excess interior white space

```{r}
my_string_3 <- "      Hi my name is    teddy   !!!"
```


```{r}
str_trim(my_string_3)
str_squish(my_string_3)
str_to_lower(my_string_3)
str_to_upper(my_string_3)
str_to_sentence(my_string_3)
```

```{r}
starwars %>% 
mutate(species_lower = str_to_lower(species))
```







